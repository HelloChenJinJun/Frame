package com.example.commonlibrary.bean.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.commonlibrary.widget.manager.video.base.VideoPlayBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_PLAY_BEAN".
*/
public class VideoPlayBeanDao extends AbstractDao<VideoPlayBean, String> {

    public static final String TABLENAME = "VIDEO_PLAY_BEAN";

    /**
     * Properties of entity VideoPlayBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Path = new Property(0, String.class, "path", true, "PATH");
        public final static Property ThumbPath = new Property(1, String.class, "thumbPath", false, "THUMB_PATH");
        public final static Property Duration = new Property(2, long.class, "duration", false, "DURATION");
        public final static Property Resolution = new Property(3, String.class, "resolution", false, "RESOLUTION");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Provider = new Property(5, String.class, "provider", false, "PROVIDER");
        public final static Property UpdateTime = new Property(6, long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property IsFavorite = new Property(7, boolean.class, "isFavorite", false, "IS_FAVORITE");
        public final static Property AlbumName = new Property(8, String.class, "albumName", false, "ALBUM_NAME");
    }


    public VideoPlayBeanDao(DaoConfig config) {
        super(config);
    }
    
    public VideoPlayBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_PLAY_BEAN\" (" + //
                "\"PATH\" TEXT PRIMARY KEY NOT NULL ," + // 0: path
                "\"THUMB_PATH\" TEXT," + // 1: thumbPath
                "\"DURATION\" INTEGER NOT NULL ," + // 2: duration
                "\"RESOLUTION\" TEXT," + // 3: resolution
                "\"TITLE\" TEXT," + // 4: title
                "\"PROVIDER\" TEXT," + // 5: provider
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 6: updateTime
                "\"IS_FAVORITE\" INTEGER NOT NULL ," + // 7: isFavorite
                "\"ALBUM_NAME\" TEXT);"); // 8: albumName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_PLAY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoPlayBean entity) {
        stmt.clearBindings();
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(1, path);
        }
 
        String thumbPath = entity.getThumbPath();
        if (thumbPath != null) {
            stmt.bindString(2, thumbPath);
        }
        stmt.bindLong(3, entity.getDuration());
 
        String resolution = entity.getResolution();
        if (resolution != null) {
            stmt.bindString(4, resolution);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String provider = entity.getProvider();
        if (provider != null) {
            stmt.bindString(6, provider);
        }
        stmt.bindLong(7, entity.getUpdateTime());
        stmt.bindLong(8, entity.getIsFavorite() ? 1L: 0L);
 
        String albumName = entity.getAlbumName();
        if (albumName != null) {
            stmt.bindString(9, albumName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoPlayBean entity) {
        stmt.clearBindings();
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(1, path);
        }
 
        String thumbPath = entity.getThumbPath();
        if (thumbPath != null) {
            stmt.bindString(2, thumbPath);
        }
        stmt.bindLong(3, entity.getDuration());
 
        String resolution = entity.getResolution();
        if (resolution != null) {
            stmt.bindString(4, resolution);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String provider = entity.getProvider();
        if (provider != null) {
            stmt.bindString(6, provider);
        }
        stmt.bindLong(7, entity.getUpdateTime());
        stmt.bindLong(8, entity.getIsFavorite() ? 1L: 0L);
 
        String albumName = entity.getAlbumName();
        if (albumName != null) {
            stmt.bindString(9, albumName);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public VideoPlayBean readEntity(Cursor cursor, int offset) {
        VideoPlayBean entity = new VideoPlayBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // path
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // thumbPath
            cursor.getLong(offset + 2), // duration
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // resolution
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // provider
            cursor.getLong(offset + 6), // updateTime
            cursor.getShort(offset + 7) != 0, // isFavorite
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // albumName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoPlayBean entity, int offset) {
        entity.setPath(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setThumbPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDuration(cursor.getLong(offset + 2));
        entity.setResolution(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProvider(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUpdateTime(cursor.getLong(offset + 6));
        entity.setIsFavorite(cursor.getShort(offset + 7) != 0);
        entity.setAlbumName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(VideoPlayBean entity, long rowId) {
        return entity.getPath();
    }
    
    @Override
    public String getKey(VideoPlayBean entity) {
        if(entity != null) {
            return entity.getPath();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VideoPlayBean entity) {
        return entity.getPath() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
