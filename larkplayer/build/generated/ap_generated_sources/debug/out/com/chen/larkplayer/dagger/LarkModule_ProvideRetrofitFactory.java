// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.chen.larkplayer.dagger;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class LarkModule_ProvideRetrofitFactory implements Factory<Retrofit> {
  private final LarkModule module;

  private final Provider<OkHttpClient> okHttpClientProvider;

  private final Provider<Retrofit.Builder> builderProvider;

  public LarkModule_ProvideRetrofitFactory(
      LarkModule module,
      Provider<OkHttpClient> okHttpClientProvider,
      Provider<Retrofit.Builder> builderProvider) {
    assert module != null;
    this.module = module;
    assert okHttpClientProvider != null;
    this.okHttpClientProvider = okHttpClientProvider;
    assert builderProvider != null;
    this.builderProvider = builderProvider;
  }

  @Override
  public Retrofit get() {
    return Preconditions.checkNotNull(
        module.provideRetrofit(okHttpClientProvider.get(), builderProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<Retrofit> create(
      LarkModule module,
      Provider<OkHttpClient> okHttpClientProvider,
      Provider<Retrofit.Builder> builderProvider) {
    return new LarkModule_ProvideRetrofitFactory(module, okHttpClientProvider, builderProvider);
  }
}
