// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.chen.larkplayer.dagger;

import com.chen.larkplayer.base.LarkDatabase;
import com.chen.larkplayer.base.LarkRepositoryManager;
import com.chen.larkplayer.base.LarkRepositoryManager_Factory;
import com.example.commonlibrary.dagger.component.AppComponent;
import dagger.internal.DoubleCheck;
import dagger.internal.MembersInjectors;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class DaggerLarkComponent implements LarkComponent {
  private Provider<Retrofit> getRetrofitProvider;

  private Provider<LarkDatabase> getDatabaseProvider;

  private Provider<LarkRepositoryManager> larkRepositoryManagerProvider;

  private DaggerLarkComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.getRetrofitProvider =
        new com_example_commonlibrary_dagger_component_AppComponent_getRetrofit(
            builder.appComponent);

    this.getDatabaseProvider =
        DoubleCheck.provider(LarkModule_GetDatabaseFactory.create(builder.larkModule));

    this.larkRepositoryManagerProvider =
        LarkRepositoryManager_Factory.create(
            MembersInjectors.<LarkRepositoryManager>noOp(),
            getRetrofitProvider,
            getDatabaseProvider);
  }

  @Override
  public LarkRepositoryManager getLarkRepositoryManager() {
    return larkRepositoryManagerProvider.get();
  }

  @Override
  public Retrofit getRetrofit() {
    return getRetrofitProvider.get();
  }

  @Override
  public LarkDatabase getLarkDatabase() {
    return getDatabaseProvider.get();
  }

  public static final class Builder {
    private LarkModule larkModule;

    private AppComponent appComponent;

    private Builder() {}

    public LarkComponent build() {
      if (larkModule == null) {
        this.larkModule = new LarkModule();
      }
      if (appComponent == null) {
        throw new IllegalStateException(AppComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerLarkComponent(this);
    }

    public Builder larkModule(LarkModule larkModule) {
      this.larkModule = Preconditions.checkNotNull(larkModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }
  }

  private static class com_example_commonlibrary_dagger_component_AppComponent_getRetrofit
      implements Provider<Retrofit> {
    private final AppComponent appComponent;

    com_example_commonlibrary_dagger_component_AppComponent_getRetrofit(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Retrofit get() {
      return Preconditions.checkNotNull(
          appComponent.getRetrofit(), "Cannot return null from a non-@Nullable component method");
    }
  }
}
