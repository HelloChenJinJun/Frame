// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.chen.larkplayer.dagger;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import java.io.File;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

public final class LarkModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final LarkModule module;

  private final Provider<File> cacheFileProvider;

  private final Provider<OkHttpClient.Builder> builderProvider;

  public LarkModule_ProvideOkHttpClientFactory(
      LarkModule module,
      Provider<File> cacheFileProvider,
      Provider<OkHttpClient.Builder> builderProvider) {
    assert module != null;
    this.module = module;
    assert cacheFileProvider != null;
    this.cacheFileProvider = cacheFileProvider;
    assert builderProvider != null;
    this.builderProvider = builderProvider;
  }

  @Override
  public OkHttpClient get() {
    return Preconditions.checkNotNull(
        module.provideOkHttpClient(cacheFileProvider.get(), builderProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<OkHttpClient> create(
      LarkModule module,
      Provider<File> cacheFileProvider,
      Provider<OkHttpClient.Builder> builderProvider) {
    return new LarkModule_ProvideOkHttpClientFactory(module, cacheFileProvider, builderProvider);
  }
}
