// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.chen.larkplayer.dagger;

import com.chen.larkplayer.base.LarkDatabase;
import com.chen.larkplayer.base.LarkRepositoryManager;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class LarkModule_ProvideRepositoryManagerFactory
    implements Factory<LarkRepositoryManager> {
  private final LarkModule module;

  private final Provider<Retrofit> retrofitProvider;

  private final Provider<LarkDatabase> larkDatabaseProvider;

  public LarkModule_ProvideRepositoryManagerFactory(
      LarkModule module,
      Provider<Retrofit> retrofitProvider,
      Provider<LarkDatabase> larkDatabaseProvider) {
    assert module != null;
    this.module = module;
    assert retrofitProvider != null;
    this.retrofitProvider = retrofitProvider;
    assert larkDatabaseProvider != null;
    this.larkDatabaseProvider = larkDatabaseProvider;
  }

  @Override
  public LarkRepositoryManager get() {
    return Preconditions.checkNotNull(
        module.provideRepositoryManager(retrofitProvider.get(), larkDatabaseProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<LarkRepositoryManager> create(
      LarkModule module,
      Provider<Retrofit> retrofitProvider,
      Provider<LarkDatabase> larkDatabaseProvider) {
    return new LarkModule_ProvideRepositoryManagerFactory(
        module, retrofitProvider, larkDatabaseProvider);
  }
}
